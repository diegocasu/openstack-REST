# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Server(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, image: str=None, flavor: str=None, network: str=None):  # noqa: E501
        """Server - a model defined in Swagger

        :param id: The id of this Server.  # noqa: E501
        :type id: int
        :param name: The name of this Server.  # noqa: E501
        :type name: str
        :param image: The image of this Server.  # noqa: E501
        :type image: str
        :param flavor: The flavor of this Server.  # noqa: E501
        :type flavor: str
        :param network: The network of this Server.  # noqa: E501
        :type network: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'image': str,
            'flavor': str,
            'network': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'image': 'image',
            'flavor': 'flavor',
            'network': 'network'
        }

        self._id = id
        self._name = name
        self._image = image
        self._flavor = flavor
        self._network = network

    @classmethod
    def from_dict(cls, dikt) -> 'Server':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Server of this Server.  # noqa: E501
        :rtype: Server
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Server.


        :return: The id of this Server.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Server.


        :param id: The id of this Server.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Server.


        :return: The name of this Server.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Server.


        :param name: The name of this Server.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def image(self) -> str:
        """Gets the image of this Server.


        :return: The image of this Server.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this Server.


        :param image: The image of this Server.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def flavor(self) -> str:
        """Gets the flavor of this Server.


        :return: The flavor of this Server.
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor: str):
        """Sets the flavor of this Server.


        :param flavor: The flavor of this Server.
        :type flavor: str
        """
        if flavor is None:
            raise ValueError("Invalid value for `flavor`, must not be `None`")  # noqa: E501

        self._flavor = flavor

    @property
    def network(self) -> str:
        """Gets the network of this Server.


        :return: The network of this Server.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network: str):
        """Sets the network of this Server.


        :param network: The network of this Server.
        :type network: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network
