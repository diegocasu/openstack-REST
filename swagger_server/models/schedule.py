# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Schedule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, peak: SchedulePeak=None, server: object=None):  # noqa: E501
        """Schedule - a model defined in Swagger

        :param peak: The peak of this Schedule.  # noqa: E501
        :type peak: SchedulePeak
        :param server: The server of this Schedule.  # noqa: E501
        :type server: object
        """
        self.swagger_types = {
            'peak': SchedulePeak,
            'server': object
        }

        self.attribute_map = {
            'peak': 'peak',
            'server': 'server'
        }

        self._peak = peak
        self._server = server

    @classmethod
    def from_dict(cls, dikt) -> 'Schedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Schedule of this Schedule.  # noqa: E501
        :rtype: Schedule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def peak(self) -> SchedulePeak:
        """Gets the peak of this Schedule.


        :return: The peak of this Schedule.
        :rtype: SchedulePeak
        """
        return self._peak

    @peak.setter
    def peak(self, peak: SchedulePeak):
        """Sets the peak of this Schedule.


        :param peak: The peak of this Schedule.
        :type peak: SchedulePeak
        """
        if peak is None:
            raise ValueError("Invalid value for `peak`, must not be `None`")  # noqa: E501

        self._peak = peak

    @property
    def server(self) -> object:
        """Gets the server of this Schedule.


        :return: The server of this Schedule.
        :rtype: object
        """
        return self._server

    @server.setter
    def server(self, server: object):
        """Sets the server of this Schedule.


        :param server: The server of this Schedule.
        :type server: object
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501

        self._server = server
